name: "detection_kps"
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "kps"
  python_param {
    module: "image_kp_data_layer"
    layer: "ImageKPDataLayer"
    param_str: '{"im_list":"a.txt", "num_keypoints": 10, "phase":"TRAIN"}'
  }
  include: { phase: TRAIN }
}
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "kps"
  python_param {
    module: "image_kp_data_layer"
    layer: "ImageKPDataLayer"
    param_str: '{"im_list":"b.txt", "num_keypoints": 10, "phase":"TEST"}'
  }
  include: { phase: TEST }
}
layer { bottom: 'data' top: 'conv1_1' name: 'conv1_1' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 64 pad: 35 kernel_size: 3 } }
layer { bottom: 'conv1_1' top: 'conv1_1' name: 'relu1_1' type: "ReLU" }
layer { bottom: 'conv1_1' top: 'conv1_2' name: 'conv1_2' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 64 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv1_2' top: 'conv1_2' name: 'relu1_2' type: "ReLU" }
layer { name: 'pool1' bottom: 'conv1_2' top: 'pool1' type: "Pooling"
  pooling_param { pool: MAX kernel_size: 2 stride: 2 } }

layer { name: 'conv2_1' bottom: 'pool1' top: 'conv2_1' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 128 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv2_1' top: 'conv2_1' name: 'relu2_1' type: "ReLU" }
layer { bottom: 'conv2_1' top: 'conv2_2' name: 'conv2_2' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 128 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv2_2' top: 'conv2_2' name: 'relu2_2' type: "ReLU" }
layer { bottom: 'conv2_2' top: 'pool2' name: 'pool2' type: "Pooling"
  pooling_param { pool: MAX kernel_size: 2 stride: 2 } }

layer { bottom: 'pool2' top: 'conv3_1' name: 'conv3_1' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 256 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv3_1' top: 'conv3_1' name: 'relu3_1' type: "ReLU" }
layer { bottom: 'conv3_1' top: 'conv3_2' name: 'conv3_2' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 256 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv3_2' top: 'conv3_2' name: 'relu3_2' type: "ReLU" }
layer { bottom: 'conv3_2' top: 'conv3_3' name: 'conv3_3' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 256 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv3_3' top: 'conv3_3' name: 'relu3_3' type: "ReLU" }
layer { bottom: 'conv3_3' top: 'pool3' name: 'pool3' type: "Pooling"
  pooling_param { pool: MAX kernel_size: 2 stride: 2 } }

layer { bottom: 'pool3' top: 'conv4_1' name: 'conv4_1' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 512 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv4_1' top: 'conv4_1' name: 'relu4_1' type: "ReLU" }
layer { bottom: 'conv4_1' top: 'conv4_2' name: 'conv4_2' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 512 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv4_2' top: 'conv4_2' name: 'relu4_2' type: "ReLU" }
layer { bottom: 'conv4_2' top: 'conv4_3' name: 'conv4_3' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 512 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv4_3' top: 'conv4_3' name: 'relu4_3' type: "ReLU" }
layer { bottom: 'conv4_3' top: 'pool4' name: 'pool4' type: "Pooling"
  pooling_param { pool: MAX kernel_size: 2 stride: 2 } }

layer { bottom: 'pool4' top: 'conv5_1' name: 'conv5_1' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 512 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv5_1' top: 'conv5_1' name: 'relu5_1' type: "ReLU" }
layer { bottom: 'conv5_1' top: 'conv5_2' name: 'conv5_2' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 512 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv5_2' top: 'conv5_2' name: 'relu5_2' type: "ReLU" }
layer { bottom: 'conv5_2' top: 'conv5_3' name: 'conv5_3' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 512 pad: 1 kernel_size: 3 } }
layer { bottom: 'conv5_3' top: 'conv5_3' name: 'relu5_3' type: "ReLU" }

## kpdsn conv 1 ###
layer { name: 'score-kpdsn1' type: "Convolution" bottom: 'conv1_2' top: 'score-kpdsn1-up'
  param { lr_mult: 0.01 decay_mult: 1 } param { lr_mult: 0.02 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 10 kernel_size: 1 } }
layer { type: "Crop" name: 'upscore-kpdsn1' bottom: 'score-kpdsn1-up' bottom: 'data' top: 'upscore-kpdsn1' }
layer { type: "Python" name: "upscore-kpdsn1-n" top: "upscore-kpdsn1-n" bottom: "upscore-kpdsn1" bottom: "kps" python_param { module: "negative_dropout" layer: "NegativeDropoutLayer"} include: { phase: TRAIN } }
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn1-n" bottom: "kps" top:"kpdsn1_loss"  loss_weight: 1 include: { phase: TRAIN }}
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn1" bottom: "kps" top:"kpdsn1_loss"  loss_weight: 1 include: { phase: TEST }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn1-n" bottom: "kps" top:"kpdsn1_loss"  loss_weight: 1 include: { phase: TRAIN }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn1" bottom: "kps" top:"kpdsn1_loss"  loss_weight: 1 include: { phase: TEST }}

### kpdsn conv 2 ###
layer { name: 'score-kpdsn2' type: "Convolution" bottom: 'conv2_2' top: 'score-kpdsn2'
  param { lr_mult: 0.01 decay_mult: 1 } param { lr_mult: 0.02 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 10 kernel_size: 1 } }
layer { type: "Deconvolution" name: 'score-kpdsn2-up' bottom: 'score-kpdsn2' top: 'score-kpdsn2-up'
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { kernel_size: 4 stride: 2 num_output: 10 weight_filler {type: "bilinear_upsampling"}} }
layer { type: "Crop" name: 'upscore-kpdsn2' bottom: 'score-kpdsn2-up' bottom: 'data' top: 'upscore-kpdsn2' }
layer { type: "Python" name: "upscore-kpdsn2-n" top: "upscore-kpdsn2-n" bottom: "upscore-kpdsn2" bottom: "kps" python_param { module: "negative_dropout" layer: "NegativeDropoutLayer"} include: { phase: TRAIN } }
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn2-n" bottom: "kps" top:"kpdsn2_loss"  loss_weight: 1 include: { phase: TRAIN }}
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn2" bottom: "kps" top:"kpdsn2_loss"  loss_weight: 1 include: { phase: TEST }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn2-n" bottom: "kps" top:"kpdsn2_loss"  loss_weight: 1 include: { phase: TRAIN }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn2" bottom: "kps" top:"kpdsn2_loss"  loss_weight: 1 include: { phase: TEST }}

### kpdsn conv 3 ###
layer { name: 'score-kpdsn3' type: "Convolution" bottom: 'conv3_3' top: 'score-kpdsn3'
  param { lr_mult: 0.01 decay_mult: 1 } param { lr_mult: 0.02 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 10 kernel_size: 1 } }
layer { type: "Deconvolution" name: 'score-kpdsn3-up' bottom: 'score-kpdsn3' top: 'score-kpdsn3-up'
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { kernel_size: 8 stride: 4 num_output: 10 weight_filler {type: "bilinear_upsampling"}} }
layer { type: "Crop" name: 'upscore-kpdsn3' bottom: 'score-kpdsn3-up' bottom: 'data' top: 'upscore-kpdsn3' }
layer { type: "Python" name: "upscore-kpdsn3-n" top: "upscore-kpdsn3-n" bottom: "upscore-kpdsn3" bottom: "kps" python_param { module: "negative_dropout" layer: "NegativeDropoutLayer"} include: { phase: TRAIN } }
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn3-n" bottom: "kps" top:"kpdsn3_loss"  loss_weight: 1 include: { phase: TRAIN }}
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn3" bottom: "kps" top:"kpdsn3_loss"  loss_weight: 1 include: { phase: TEST }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn3-n" bottom: "kps" top:"kpdsn3_loss"  loss_weight: 1 include: { phase: TRAIN }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn3" bottom: "kps" top:"kpdsn3_loss"  loss_weight: 1 include: { phase: TEST }}
###kpdsn conv 4###
layer { name: 'score-kpdsn4' type: "Convolution" bottom: 'conv4_3' top: 'score-kpdsn4'
  param { lr_mult: 0.01 decay_mult: 1 } param { lr_mult: 0.02 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 10 kernel_size: 1 } }
layer { type: "Deconvolution" name: 'score-kpdsn4-up' bottom: 'score-kpdsn4' top: 'score-kpdsn4-up'
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { kernel_size: 16 stride: 8 num_output: 10  weight_filler {type: "bilinear_upsampling"}} }
layer { type: "Crop" name: 'upscore-kpdsn4' bottom: 'score-kpdsn4-up' bottom: 'data' top: 'upscore-kpdsn4' }
layer { type: "Python" name: "upscore-kpdsn4-n" top: "upscore-kpdsn4-n" bottom: "upscore-kpdsn4" bottom: "kps" python_param { module: "negative_dropout" layer: "NegativeDropoutLayer"} include: { phase: TRAIN } }
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn4-n" bottom: "kps" top:"kpdsn4_loss"  loss_weight: 1 include: { phase: TRAIN }}
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn4" bottom: "kps" top:"kpdsn4_loss"  loss_weight: 1 include: { phase: TEST }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn4-n" bottom: "kps" top:"kpdsn4_loss"  loss_weight: 1 include: { phase: TRAIN }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn4" bottom: "kps" top:"kpdsn4_loss"  loss_weight: 1 include: { phase: TEST }}
###kpdsn conv 5###
layer { name: 'score-kpdsn5' type: "Convolution" bottom: 'conv5_3' top: 'score-kpdsn5'
  param { lr_mult: 0.01 decay_mult: 1 } param { lr_mult: 0.02 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 10 kernel_size: 1 } }
layer { type: "Deconvolution" name: 'score-kpdsn5-up' bottom: 'score-kpdsn5' top: 'score-kpdsn5-up'
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { kernel_size: 32 stride: 16 num_output: 10 weight_filler {type: "bilinear_upsampling"}} }
layer { type: "Crop" name: 'upscore-kpdsn5' bottom: 'score-kpdsn5-up' bottom: 'data' top: 'upscore-kpdsn5' }
layer { type: "Python" name: "upscore-kpdsn5-n" top: "upscore-kpdsn5-n" bottom: "upscore-kpdsn5" bottom: "kps" python_param { module: "negative_dropout" layer: "NegativeDropoutLayer"} include: { phase: TRAIN } }
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn5-n" bottom: "kps" top:"kpdsn5_loss"  loss_weight: 1 include: { phase: TRAIN }}
layer { type: "EuclideanLoss" bottom: "upscore-kpdsn5" bottom: "kps" top:"kpdsn5_loss"  loss_weight: 1 include: { phase: TEST }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn5-n" bottom: "kps" top:"kpdsn5_loss"  loss_weight: 1 include: { phase: TRAIN }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-kpdsn5" bottom: "kps" top:"kpdsn5_loss"  loss_weight: 1 include: { phase: TEST }}

### Concat and multiscale weight layer ###
layer { name: "concat-kp" bottom: "upscore-kpdsn1"  bottom: "upscore-kpdsn2" bottom: "upscore-kpdsn3" 
         bottom: "upscore-kpdsn4" bottom: "upscore-kpdsn5" top: "concat-upscore-kp" type: "Concat"
  concat_param { concat_dim: 1} }
layer { name: 'new-score-weighting-kp' type: "Convolution" bottom: 'concat-upscore-kp' top: 'upscore-fuse-kp'
  param { lr_mult: 0.001 decay_mult: 1 } param { lr_mult: 0.002 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 10 kernel_size: 1 weight_filler {type: "constant" value: 0.2} } }
layer { type: "Python" name: "upscore-fuse-kp-n" top: "upscore-fuse-kp-n" bottom: "upscore-fuse-kp" bottom: "kps" python_param { module: "negative_dropout" layer: "NegativeDropoutLayer"} include: { phase: TRAIN } }
layer { type: "EuclideanLoss" bottom: "upscore-fuse-kp-n" bottom: "kps" top:"fuse_loss-kp"  loss_weight: 1 include: { phase: TRAIN }}
layer { type: "EuclideanLoss" bottom: "upscore-fuse-kp" bottom: "kps" top:"fuse_loss-kp"  loss_weight: 1 include: { phase: TEST }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-fuse-kp-n" bottom: "kps" top:"fuse_loss-kp"  loss_weight: 1 include: { phase: TRAIN }}
#layer { type: "SigmoidCrossEntropyLoss" bottom: "upscore-fuse-kp" bottom: "kps" top:"fuse_loss-kp"  loss_weight: 1 include: { phase: TEST }}
